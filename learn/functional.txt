関数型プログラミングではプログラムの構成に関数を多用するため、ほとんどの関数型言語では関数を第一級オブジェクトとして扱い、その理論的な計算モデルとして第一級オブジェクトとしての関数を扱えるラムダ計算や項書き換えを採用している。

関数への引数がプログラムへの入力で、関数を引数に作用させて評価して得られる値がプログラムからの出力であるとすると、コンピュータプログラムはある種の関数であると考えることができる。ここで、入力や出力は記憶装置中のファイルのようなものばかりではなく、マウスの動きの情報といった入力や、画面への表示といった出力も考えられ、関数型プログラミングにおいては実際にそれらを扱う関数としてモデル化する。

純粋関数型言語では、参照透過性が常に保たれるという意味において、全ての式や関数の評価時に副作用を生まない。純粋関数型言語であるHaskellやCleanは非正格な評価を基本としており、引数はデフォルトで遅延評価される。一方、Idrisは純粋だが正格評価を採用している。入出力などを参照透過性を保ったまま実現するために、たとえば Haskell ではモナド、Clean では一意型（英語版）という特殊な型を通して一貫性のある表現を提供する。

非純粋関数型言語では、参照透過性を壊す、副作用があるような式や関数も存在する。LISPなどでデータ構造の破壊的変更などの副作用を多用したプログラミングを行うと、それはもはや手続き型プログラミングである。多くの場合、非純粋関数型言語の評価戦略は正格評価（先行評価）であるが、遅延評価する部分を明示することで、無限リストなどを扱えるものもある。

JavaScriptやJavaなど近年の高水準言語には、関数型言語の機能や特徴を取り入れているものがある。変数の値やオブジェクトの状態を書き換えるプログラミングスタイルを通常とするため、関数型言語とは分類されない。一方LISPは、その多くが副作用のある式や関数が多数あり、手続き型スタイルでのプログラミングがされることが多いが、理論的なモデル（「純LISP」）の存在や副作用を使わないプログラミングが基本であること、歴史的理由などから、関数型プログラミング言語に含む。Pascalでは「手続き」と呼ばれる値を「返さない」ルーチンも、C言語ではvoid型の値を返す関数と捉える。しかし、Pascalは手続き型言語で、C言語は関数型言語というのは明らかに誤りである[3]。なお、OCamlやHaskellなどでは、「自明な値(例えば())を返す」と、値を返さない（Voidなど）はより明確に区別され、後者は停止しないか例外を出す(そのため結果がない)ようなプログラムを表す。

なお、「関数型言語である」と「関数型プログラミングをする」は同値ではなく、関数型には分類されない言語で関数型プログラミングをすることや、関数型プログラミングを基本とする言語の上で他のパラダイムを実現する例もある[4]。

データフロープログラミング言語も関数型言語と共通した特徴を部分的に持つ。
